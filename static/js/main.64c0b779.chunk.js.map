{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChangeCallback","useState","Math","random","toFixed","slice","id","fieldErrorMessage","setFieldErrorMessage","hasError","htmlFor","type","classNames","onChange","event","target","onBlur","fieldErrorText","fieldData","isUrl","match","length","validateFormField","toLowerCase","includes","handlerInputChange","NewMovie","onAdd","count","setCount","setTitle","titleHasError","setTitleHasError","setDescription","setImgUrl","imgUrlHasError","setImgUrlHasError","setImdbUrl","imdbUrlHasError","setImdbUrlHasError","setImdbId","imdbIdHasError","setImdbIdHasError","formHasErrors","handlerOnSubmit","preventDefault","currentCount","onSubmit","data","fieldHasError","disabled","App","moviesFromServer","moviesToRender","setMoviesToRender","find","movieRendered","alert","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"2RAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBC8BpC,IAAMC,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,wBACI,MADe,WAAQ,EACvB,EAEJ,EAAaC,oBAAS,2BAASN,EAAT,YApCfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAkCa,IAAfC,EAAP,oBACA,EAAkDL,mBAAS,IAA3D,mBAAOM,EAAP,KAA0BC,EAA1B,KAaMC,EAAWV,GAAYQ,EAE7B,OACE,sBAAKzB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ4B,QAASJ,EAAlC,SACGT,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE6B,KAAK,OACLL,GAAIA,EACJ,0BAAkBX,GAClBb,UAAW8B,IAAW,QAAS,CAC7B,YAAaH,IAEfX,YAAaA,EACbF,MAAOA,EACPiB,SAAU,SAACC,GAAD,OAAWd,EAAiBc,EAAMC,OAAOnB,OAAO,EAAhD,EACVoB,OAAQ,SAACF,GAAD,OA9BZ,SAACA,GACD,IAAMG,EAnCZ,SACEpB,EACAqB,EACAC,GAKA,GAAID,GAAaC,IAAUD,EAAUE,MAFlB,wKAGjB,MAAO,4BAGT,QAAQ,GACN,KAAMF,EACJ,MAAM,GAAN,OAAUrB,EAAV,gBACF,KAAMqB,EAAUG,OAAS,IAAOF,EAC9B,MAAM,GAAN,OAAUtB,EAAV,8BACF,QACE,MAAO,GAEZ,CAe4ByB,CACrBzB,EACAiB,EAAMC,OAAOnB,MACbC,EAAM0B,cAAcC,SAAS,QAG/BhB,EAAqBS,GACrBjB,EAAiBc,EAAMC,OAAOnB,QAASqB,EACxC,CAqBwBQ,CAAmBX,EAA9B,MAIXL,GACC,mBAAG3B,UAAU,iBAAb,SAA+ByB,MAItC,ECnFYmB,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAG1C,EAA0B1B,mBAAS,GAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KAEA,EAA0B5B,mBAAS,IAAnC,mBAAOf,EAAP,KAAc4C,EAAd,KACA,EAA0C7B,oBAAS,GAAnD,mBAAO8B,EAAP,KAAsBC,EAAtB,KAEA,EAAsC/B,mBAAS,IAA/C,mBAAOd,EAAP,KAAoB8C,EAApB,KAEA,EAA4BhC,mBAAS,IAArC,mBAAOjB,EAAP,KAAekD,EAAf,KACA,EAA4CjC,oBAAS,GAArD,mBAAOkC,EAAP,KAAuBC,EAAvB,KAEA,EAA8BnC,mBAAS,IAAvC,mBAAOZ,EAAP,KAAgBgD,EAAhB,KACA,EAA8CpC,oBAAS,GAAvD,mBAAOqC,EAAP,KAAwBC,EAAxB,KAEA,EAA4BtC,mBAAS,IAArC,mBAAOR,EAAP,KAAe+C,EAAf,KACA,EAA4CvC,oBAAS,GAArD,mBAAOwC,EAAP,KAAuBC,EAAvB,KAEMC,EACFZ,GAAiBI,GAAkBG,GAAmBG,EAWpDG,EAAkB,SAAC9B,GACvBA,EAAM+B,iBACNlB,EAAM,CACJzC,QACAC,cACAH,SACAS,SACAJ,YAEFwC,GAAS,SAAAiB,GAAY,OAAIA,EAAe,CAAnB,IAjBrBhB,EAAS,IACTG,EAAe,IACfC,EAAU,IACVG,EAAW,IACXG,EAAU,IACVR,GAAiB,EAclB,EAED,OACE,uBACElD,UAAU,WAEViE,SAAU,SAACjC,GACT8B,EAAgB9B,EACjB,EALH,UAOE,oBAAIhC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPc,iBAAkB,SAACgD,EAAMC,GACvBjB,EAAiBiB,GACjBnB,EAASkB,EACV,EACDjD,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOT,EACPa,iBAAkB,SAACgD,GACjBf,EAAee,EAChB,IAGH,cAAC,EAAD,CACErD,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPe,UAAQ,EACRC,iBAAkB,SAACgD,EAAMC,GACvBb,EAAkBa,GAClBf,EAAUc,EACX,IAGH,cAAC,EAAD,CACErD,KAAK,UACLE,MAAM,WACND,MAAOP,EACPU,UAAQ,EACRC,iBAAkB,SAACgD,EAAMC,GACvBV,EAAmBU,GACnBZ,EAAWW,EACZ,IAGH,cAAC,EAAD,CACErD,KAAK,SACLE,MAAM,UACND,MAAOH,EACPM,UAAQ,EACRC,iBAAkB,SAACgD,EAAMC,GACvBP,EAAkBO,GAClBT,EAAUQ,EACX,IAGH,qBAAKlE,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACVoE,SAAUP,EAJZ,uBA9DCf,EA0EV,E,OCtHYuB,G,MAAM,WACjB,MAA4ClD,mBAAS,YAAImD,IAAzD,mBAAOC,EAAP,KAAuBC,EAAvB,KAcA,OACE,sBAAKxE,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQ8D,MAEtB,qBAAKvE,UAAU,UAAf,SACE,cAAC,EAAD,CAAU6C,MAnBC,SAAC9C,GACZwE,EAAeE,MACjB,SAAAC,GAAa,OAAI3E,EAAMY,SAAW+D,EAAc/D,MAAnC,IAGbgE,MAAM,mCAKRH,GAAkB,SAAAI,GAAa,4BAAQA,GAAR,CAAuB7E,GAAvB,GAChC,QAYF,GChCD8E,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.64c0b779.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChangeCallback?: (newValue: string, hasError: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nfunction validateFormField(\n  label: string,\n  fieldData: string,\n  isUrl: boolean,\n): string {\n  // eslint-disable-next-line max-len\n  const patternUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  if (fieldData && isUrl && !fieldData.match(patternUrl)) {\n    return 'Please insert correct url';\n  }\n\n  switch (true) {\n    case !fieldData:\n      return `${label} is required`;\n    case (fieldData.length < 3) && !isUrl:\n      return `${label} requires min 3 characters`;\n    default:\n      return '';\n  }\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChangeCallback = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [fieldErrorMessage, setFieldErrorMessage] = useState('');\n  const handlerInputChange\n    = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const fieldErrorText = validateFormField(\n        label,\n        event.target.value,\n        label.toLowerCase().includes('url'),\n      );\n\n      setFieldErrorMessage(fieldErrorText);\n      onChangeCallback(event.target.value, !!fieldErrorText);\n    };\n\n  const hasError = required && fieldErrorMessage;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={(event) => onChangeCallback(event.target.value, false)}\n          onBlur={(event) => handlerInputChange(event)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{fieldErrorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [titleHasError, setTitleHasError] = useState(true);\n\n  const [description, setDescription] = useState('');\n\n  const [imgUrl, setImgUrl] = useState('');\n  const [imgUrlHasError, setImgUrlHasError] = useState(true);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbUrlHasError, setImdbUrlHasError] = useState(true);\n\n  const [imdbId, setImdbId] = useState('');\n  const [imdbIdHasError, setImdbIdHasError] = useState(true);\n\n  const formHasErrors\n    = titleHasError || imgUrlHasError || imdbUrlHasError || imdbIdHasError;\n\n  const clearFormFields = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setTitleHasError(true); // set errors to true, so submit button will disabled after adding\n  };\n\n  const handlerOnSubmit = (event:React.FormEvent) => {\n    event.preventDefault();\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbId,\n      imdbUrl,\n    });\n    setCount(currentCount => currentCount + 1);\n    clearFormFields();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        handlerOnSubmit(event);\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChangeCallback={(data, fieldHasError) => {\n          setTitleHasError(fieldHasError);\n          setTitle(data);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChangeCallback={(data) => {\n          setDescription(data);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        required\n        onChangeCallback={(data, fieldHasError) => {\n          setImgUrlHasError(fieldHasError);\n          setImgUrl(data);\n        }}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        required\n        onChangeCallback={(data, fieldHasError) => {\n          setImdbUrlHasError(fieldHasError);\n          setImdbUrl(data);\n        }}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        required\n        onChangeCallback={(data, fieldHasError) => {\n          setImdbIdHasError(fieldHasError);\n          setImdbId(data);\n        }}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={formHasErrors}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport { Movie } from './types/Movie';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [moviesToRender, setMoviesToRender] = useState([...moviesFromServer]);\n  const addMovie = (movie: Movie) => {\n    if (moviesToRender.find(\n      movieRendered => movie.imdbId === movieRendered.imdbId,\n    )) {\n      // eslint-disable-next-line no-alert\n      alert('Movie ID exists in current list');\n\n      return;\n    }\n\n    setMoviesToRender(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesToRender} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}