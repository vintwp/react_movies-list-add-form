{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","fieldErrorMessage","setFieldErrorMessage","hasError","htmlFor","type","classNames","event","target","onBlur","fieldData","isUrl","match","length","validateTextField","toLowerCase","includes","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","handlerOnSubmit","preventDefault","currentCount","onSubmit","data","disabled","App","initialMovies","moviesFromServer","moviesToRender","setMoviesToRender","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"2RAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCS3C,IAAMC,EAAU,uKAEHC,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASN,EAAT,YAjBfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAea,IAAfC,EAAP,oBACA,EAAkDL,mBAAS,IAA3D,mBAAOM,EAAP,KAA0BC,EAA1B,KAqBMC,EAAWV,GAAYQ,EAE7B,OACE,sBAAK1B,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ6B,QAASJ,EAAlC,SACGT,IAGH,qBAAKhB,UAAU,UAAf,SACE,uBACE8B,KAAK,OACLL,GAAIA,EACJ,0BAAkBX,GAClBd,UAAW+B,IAAW,QAAS,CAC7B,YAAaH,IAEfX,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAa,GAAK,OAAIb,EAASa,EAAMC,OAAOlB,MAA1B,EACfmB,OAAQ,SAACF,GAAD,OAtCU,SAACG,GAA4C,IAAzBC,EAAwB,wDACpE,GAAIA,IAAUD,EAAUE,MAAMzB,IAAYuB,EACxCR,EAAqB,kCAKvB,QAAQ,GACN,KAAMQ,EACJR,EAAqB,GAAD,OAAIX,EAAJ,iBACpB,MACF,KAAMmB,EAAUG,OAAS,IAAOF,EAC9BT,EAAqB,GAAD,OAAIX,EAAJ,+BACpB,MACF,QACEW,EAAqB,IAE1B,CAqB0BY,CACjBP,EAAMC,OAAOlB,MACbC,EAAMwB,cAAcC,SAAS,OAFvB,MAOXb,GACC,mBAAG5B,UAAU,iBAAb,SAA+B0B,MAItC,EC3EYgB,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAG1C,EAA0BvB,mBAAS,GAAnC,mBAAOwB,EAAP,KAAcC,EAAd,KACA,EAA0BzB,mBAAS,IAAnC,mBAAOhB,EAAP,KAAc0C,EAAd,KACA,EAAsC1B,mBAAS,IAA/C,mBAAOf,EAAP,KAAoB0C,EAApB,KACA,EAA4B3B,mBAAS,IAArC,mBAAOlB,EAAP,KAAe8C,EAAf,KACA,EAA8B5B,mBAAS,IAAvC,mBAAOb,EAAP,KAAgB0C,EAAhB,KACA,EAA4B7B,mBAAS,IAArC,mBAAOT,EAAP,KAAeuC,EAAf,KAUMC,EAAkB,SAACnB,GACvBA,EAAMoB,iBARNN,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IAMVL,GAAS,SAAAQ,GAAY,OAAIA,EAAe,CAAnB,IAErBV,EAAM,CACJvC,QACAC,cACAH,SACAS,SACAJ,WAEH,EAED,OACE,uBACEP,UAAU,WAEVsD,SAAU,SAACtB,GACTmB,EAAgBnB,EACjB,EALH,UAOE,oBAAIhC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEc,KAAK,QACLE,MAAM,QACND,MAAOX,EACPe,SAAU,SAACoC,GACTT,EAASS,EACV,EACDrC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOV,EACPc,SAAU,SAACoC,GACTR,EAAeQ,EAChB,IAGH,cAAC,EAAD,CACEzC,KAAK,SACLE,MAAM,YACND,MAAOb,EACPgB,UAAQ,EACRC,SAAU,SAACoC,GACTP,EAAUO,EACX,IAGH,cAAC,EAAD,CACEzC,KAAK,UACLE,MAAM,WACND,MAAOR,EACPW,UAAQ,EACRC,SAAU,SAACoC,GACTN,EAAWM,EACZ,IAGH,cAAC,EAAD,CACEzC,KAAK,SACLE,MAAM,UACND,MAAOJ,EACPO,UAAQ,EACRC,SAAU,SAACoC,GACTL,EAAUK,EACX,IAGH,qBAAKvD,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE8B,KAAK,SACL,UAAQ,gBACR9B,UAAU,iBACVwD,UAAWpD,IAAUF,IAAWK,IAAYI,EAJ9C,uBA1DCiC,EAsEV,E,OCtGYa,G,MAAM,WACjB,IAAMC,EAAa,YAAOC,GAC1B,EAA4CvC,mBAAS,YAAIsC,IAAzD,mBAAOE,EAAP,KAAuBC,EAAvB,KAKA,OACE,sBAAK7D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQmD,MAEtB,qBAAK5D,UAAU,UAAf,SACE,cAAC,EAAD,CAAU2C,MAVC,SAAC5C,GAChB8D,GAAkB,SAAAC,GAAa,4BAAQA,GAAR,CAAuB/D,GAAvB,GAChC,QAYF,GCxBDgE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.090a4908.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [fieldErrorMessage, setFieldErrorMessage] = useState('');\n\n  const validateTextField = (fieldData: string, isUrl = false): void => {\n    if (isUrl && !fieldData.match(pattern) && fieldData) {\n      setFieldErrorMessage('Please insert correct url');\n\n      return;\n    }\n\n    switch (true) {\n      case !fieldData:\n        setFieldErrorMessage(`${label} is required`);\n        break;\n      case (fieldData.length < 3) && !isUrl:\n        setFieldErrorMessage(`${label} requires min 2 characters`);\n        break;\n      default:\n        setFieldErrorMessage('');\n    }\n  };\n\n  const hasError = required && fieldErrorMessage;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={(event) => validateTextField(\n            event.target.value,\n            label.toLowerCase().includes('url'),\n          )}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{fieldErrorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const clearFormFields = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handlerOnSubmit = (event:React.FormEvent) => {\n    event.preventDefault();\n    clearFormFields();\n    setCount(currentCount => currentCount + 1);\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbId,\n      imdbUrl,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        handlerOnSubmit(event);\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(data) => {\n          setTitle(data);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(data) => {\n          setDescription(data);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        required\n        onChange={(data) => {\n          setImgUrl(data);\n        }}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        required\n        onChange={(data) => {\n          setImdbUrl(data);\n        }}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        required\n        onChange={(data) => {\n          setImdbId(data);\n        }}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!title || !imgUrl || !imdbUrl || !imdbId}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport { Movie } from './types/Movie';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App = () => {\n  const initialMovies = [...moviesFromServer];\n  const [moviesToRender, setMoviesToRender] = useState([...initialMovies]);\n  const addMovie = (movie: Movie) => {\n    setMoviesToRender(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesToRender} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}